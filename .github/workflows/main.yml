name: Dev

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  apk:
    name: Generate APK
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1
      - name: set up Node.js
        uses: actions/setup-node@v2
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn install --pure-lockfile

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Decrypt encrypted keystore
        working-directory: ./mobile/android
        run: ./decrypt_keystore.sh
        env:
          ENCRYPTED_KEYSTORE_PASSPHRASE: ${{ secrets.ENCRYPTED_KEYSTORE_PASSPHRASE }}

      - name: Build debug APK
        working-directory: ./mobile/android
        run: bash ./gradlew assembleRelease
        env:
          ORG_GRADLE_PROJECT_RELEASE_STORE_FILE: ${{ secrets.ORG_GRADLE_PROJECT_RELEASE_STORE_FILE }}
          ORG_GRADLE_PROJECT_RELEASE_STORE_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_RELEASE_STORE_PASSWORD }}
          ORG_GRADLE_PROJECT_RELEASE_KEY_ALIAS: ${{ secrets.ORG_GRADLE_PROJECT_RELEASE_KEY_ALIAS }}
          ORG_GRADLE_PROJECT_RELEASE_KEY_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_RELEASE_KEY_PASSWORD }}

      - name: Upload APK
        uses: actions/upload-artifact@v1
        with:
          name: app
          path: mobile/android/app/build/outputs/apk/release/app-release.apk
